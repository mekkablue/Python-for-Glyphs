<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>#MenuTitle: ${1:$TM_FILENAME}
# -*- coding: utf-8 -*-
from __future__ import division, print_function, unicode_literals
__doc__="""
${2:Create effect for selected glyphs.}
"""

import vanilla

class ${3:${1/ //g}}( object ):
	def __init__( self ):
		# Window 'self.w':
		windowWidth  = 350
		windowHeight = 260
		windowWidthResize  = 100 # user can resize width by this value
		windowHeightResize = 0   # user can resize height by this value
		self.w = vanilla.FloatingWindow(
			( windowWidth, windowHeight ), # default window size
			"$1", # window title
			minSize = ( windowWidth, windowHeight ), # minimum size (for resizing)
			maxSize = ( windowWidth + windowWidthResize, windowHeight + windowHeightResize ), # maximum size (for resizing)
			autosaveName = "com.${4:mekkablue}.$3.mainwindow" # stores last window position and size
		)
		
		# UI elements:
		linePos, inset, lineHeight = 12, 15, 22
		self.w.text_1 = vanilla.TextBox( (inset-1, linePos+2, 75, 14), "inset", sizeStyle='small' )
		self.w.popup_1 = vanilla.PopUpButton( (inset+80, linePos, 50, 17), [str(x) for x in range( 3, 12 )], callback=self.SavePreferences, sizeStyle='small' )
		self.w.edit_1 = vanilla.EditText( (inset+80+55, linePos, -inset, 19), "insert text here", sizeStyle='small', callback=self.SavePreferences)
		linePos += lineHeight
		
		# Run Button:
		self.w.runButton = vanilla.Button( (-80-inset, -20-inset, -inset, -inset), "Run", sizeStyle='regular', callback=self.$5 )
		self.w.setDefaultButton( self.w.runButton )
		
		# Load Settings:
		if not self.LoadPreferences():
			print("Note: '$1' could not load preferences. Will resort to defaults")
		
		# Open window and focus on it:
		self.w.open()
		self.w.makeKey()
		
	def SavePreferences( self, sender=None ):
		try:
			# write current settings into prefs:
			Glyphs.defaults["com.$4.$3.popup_1"] = self.w.popup_1.get()
			return True
		except:
			import traceback
			print(traceback.format_exc())
			return False

	def LoadPreferences( self ):
		try:
			# register defaults:
			Glyphs.registerDefault("com.$4.$3.popup_1", 0)
			
			# load previously written prefs:
			self.w.popup_1.set( Glyphs.defaults["com.$4.$3.popup_1"] )
			return True
		except:
			import traceback
			print(traceback.format_exc())
			return False

	def ${5:$3Main}( self, sender=None ):
		try:
			# clear macro window log:
			Glyphs.clearLog()
			
			# update settings to the latest user input:
			if not self.SavePreferences():
				print("Note: '$1' could not write preferences.")
			
			thisFont = Glyphs.font # frontmost font
			if thisFont is None:
				Message(title="No Font Open", message="The script requires a font. Open a font and run the script again.", OKButton=None)
			else:
				print("$1 Report for %s" % thisFont.familyName)
				if thisFont.filepath:
					print(thisFont.filepath)
				else:
					print("⚠️ The font file has not been saved yet.")
				print()
			
				${7:listOfSelectedLayers = thisFont.selectedLayers # active layers of currently selected glyphs
				for thisLayer in listOfSelectedLayers: # loop through layers
					thisGlyph = thisLayer.parent
					print(thisGlyph.name, thisLayer.name)
					# output all node coordinates:
					for thisPath in thisLayer.paths:
						for thisNode in thisLayer.nodes:
							print("-- %.1f %.1f" % ( thisNode.x, thisNode.y ))
				}
				$0
			
	${6:			self.w.close() # delete if you want window to stay open
}
			# Final report:
			Glyphs.showNotification( 
				"%s: Done" % (thisFont.familyName),
				"$1 is finished. Details in Macro Window",
				)
			print("\nDone.")

		except Exception as e:
			# brings macro window to front and reports error:
			Glyphs.showMacroWindow()
			print("$1 Error: %s" % e)
			import traceback
			print(traceback.format_exc())

$3()</string>
	<key>name</key>
	<string>Glyphs gui</string>
	<key>tabTrigger</key>
	<string>gsgui</string>
	<key>uuid</key>
	<string>EB1EA211-2FA0-4C31-BBB4-818161C0977A</string>
</dict>
</plist>
