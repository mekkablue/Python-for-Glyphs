<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>#MenuTitle: ${1:$TM_FILENAME}
# -*- coding: utf-8 -*-
from __future__ import division, print_function, unicode_literals
__doc__="""
${2:Create effect for selected glyphs.}
"""

import vanilla, sys

class ${3:${1/ //g}}(object):
	prefID = "com.${4:mekkablue}.$3"
	prefDict = {
		# "prefName": defaultValue,
		"popup_1": 0,
	}
	
	def __init__( self ):
		# Window 'self.w':
		windowWidth  = 350
		windowHeight = 260
		windowWidthResize  = 100 # user can resize width by this value
		windowHeightResize = 0   # user can resize height by this value
		self.w = vanilla.FloatingWindow(
			( windowWidth, windowHeight ), # default window size
			"$1", # window title
			minSize = (windowWidth, windowHeight), # minimum size (for resizing)
			maxSize = (windowWidth + windowWidthResize, windowHeight + windowHeightResize), # maximum size (for resizing)
			autosaveName = self.domain("mainwindow") # stores last window position and size
		)
		
		# UI elements:
		linePos, inset, lineHeight = 12, 15, 22
		self.w.text_1 = vanilla.TextBox((inset-1, linePos+2, 75, 14), "inset", sizeStyle="small")
		self.w.popup_1 = vanilla.PopUpButton((inset+80, linePos, 50, 17), [str(x) for x in range( 3, 12 )], callback=self.SavePreferences, sizeStyle="small")
		self.w.edit_1 = vanilla.EditText((inset+80+55, linePos, -inset, 19), "insert text here", sizeStyle="small", callback=self.SavePreferences)
		linePos += lineHeight
		
		# Run Button:
		self.w.runButton = vanilla.Button((-80-inset, -20-inset, -inset, -inset), "Run", sizeStyle="regular", callback=self.$5)
		self.w.setDefaultButton(self.w.runButton)
		
		# Load Settings:
		if not self.LoadPreferences():
			print("‚ö†Ô∏è ‚Äò$1‚Äô could not load preferences. Will resort to defaults.")
		
		# Open window and focus on it:
		self.w.open()
		self.w.makeKey()
	
	def domain(self, prefName):
		prefName = prefName.strip().strip(".")
		return self.prefID + "." + prefName.strip()
	
	def pref(self, prefName):
		prefDomain = self.domain(prefName)
		return Glyphs.defaults[prefDomain]
	
	def SavePreferences(self, sender=None):
		try:
			# write current settings into prefs:
			for prefName in self.prefDict.keys():
				Glyphs.defaults[self.domain(prefName)] = getattr(self.w, prefName).get()
			return True
		except:
			import traceback
			print(traceback.format_exc())
			return False

	def LoadPreferences( self ):
		try:
			for prefName in self.prefDict.keys():
				# register defaults:
				Glyphs.registerDefault(self.domain(prefName), self.prefDict[prefName])
				# load previously written prefs:
				getattr(self.w, prefName).set(self.pref(prefName))
			return True
		except:
			import traceback
			print(traceback.format_exc())
			return False

	def ${5:$3Main}( self, sender=None ):
		try:
			# clear macro window log:
			Glyphs.clearLog()
			
			# update settings to the latest user input:
			if not self.SavePreferences():
				print("‚ö†Ô∏è ‚Äò$1‚Äô could not write preferences.")
			
			# read prefs:
			for prefName in self.prefDict.keys():
				try:
					setattr(sys.modules[__name__], prefName, self.pref(prefName))
				except:
					fallbackValue = self.prefDict[prefName]
					print(f"‚ö†Ô∏è Could not set pref ‚Äò{prefName}‚Äô, resorting to default value: ‚Äò{fallbackValue}‚Äô.")
					setattr(sys.modules[__name__], prefName, fallbackValue)
			
			thisFont = Glyphs.font # frontmost font
			if thisFont is None:
				Message(title="No Font Open", message="The script requires a font. Open a font and run the script again.", OKButton=None)
			else:
				filePath = thisFont.filepath
				if filePath:
					report = f"{filePath.lastPathComponent()}\nüìÑ {filePath}"
				else:
					report = f"{thisFont.familyName}\n‚ö†Ô∏è The font file has not been saved yet."
				print("$1 Report for {report}")
				print()
			
				${7:listOfSelectedLayers = thisFont.selectedLayers # active layers of currently selected glyphs
				for thisLayer in listOfSelectedLayers: # loop through layers
					thisGlyph = thisLayer.parent
					print(thisGlyph.name, thisLayer.name)
					# output all node coordinates:
					for thisPath in thisLayer.paths:
						for thisNode in thisLayer.nodes:
							print(f"-- {thisNode.x:.1f} {thisNode.y:.1f}")
				}
				$0
			
	${6:			self.w.close() # delete if you want window to stay open
}
			print("\nDone.")

		except Exception as e:
			# brings macro window to front and reports error:
			Glyphs.showMacroWindow()
			print(f"$1 Error: {e}")
			import traceback
			print(traceback.format_exc())

$3()</string>
	<key>name</key>
	<string>Glyphs gui</string>
	<key>tabTrigger</key>
	<string>gsgui</string>
	<key>uuid</key>
	<string>EB1EA211-2FA0-4C31-BBB4-818161C0977A</string>
</dict>
</plist>
